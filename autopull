#!/usr/bin/env sh

target_user=$(/usr/bin/whoami)

autopull_repo_file=$(echo $(eval echo ~$target_user)/.autopull_repositories | xargs -n 1 ls 2>/dev/null | head -n 1)

if [ "$1" = "--help" ]; then
    echo "Usage: autopull [DIRECTORY] [--uninstall] [--clean] [--cleanall]"
    echo "DIRECTORY: The directory to set up autopull for. If no directory is provided, the current directory is used."
    echo "--uninstall: Uninstalls autopull from the system."
    echo "--clean: Removes autopull for the current directory."
    echo "--cleanall: Removes autopull for all directories."
    exit 0
fi

if [ "$1" = "--uninstall" ]; then
    if [ "$(id -u)" -ne 0 ]; then
        echo "Running with sudo..."
        exec sudo "$0" "$@" $target_user
    fi
    if [ "$target_user" = "root" ]; then
        target_user=$(eval echo \${$#})
    fi

    if [ $autopull_repo_file ]; then
        rm $autopull_repo_file
    fi
    if [ "/usr/local/bin/autopull" ]; then
        rm /usr/local/bin/autopull
    fi
    crontab -u "$target_user" -l | grep -v "# AutoPull" | crontab -u "$target_user" -
    crontab -u "$target_user" -l | grep -v ".autopull_repositories" | crontab -u "$target_user" -
    echo "Autopull uninstalled. To reinstall, run 'make' in the AutoPull repository."
    exit 0
fi

if [ "$1" = "--remove-all" ]; then
    autopull_script=$(echo "$(which autopull)" | sed 's/\//\\\//g')
    if [ "$(uname)" = "Darwin" ]; then
        sed -i '' "/$autopull_script/d" "$autopull_repo_file"
    else
        sed -i "/$autopull_script/d" "$autopull_repo_file"
    fi
    echo "Autopull removed for all directories."
    exit 0
fi

if [ "$1" = "--remove" ]; then
    crontab -l | grep -v "$(which autopull) $PWD" | crontab -

    autopull_script=$(echo "$(which autopull)\ $PWD" | sed 's/\//\\\//g')
    if [ "$(uname)" = "Darwin" ]; then
        sed -i '' "/$autopull_script/d" "$autopull_repo_file"
    else
        sed -i "/$autopull_script/d" "$autopull_repo_file"
    fi
    echo "Autopull removed for $PWD."
    exit 0
fi

if [ "$1" = "--pull-all" ]; then
    repositories=$(cat $autopull_repo_file)
    (($(which autopull) $repositories &) & ) >/dev/null
    exit 0
fi

if [ "$1" = "--repositories" ] || [ "$1" = "--repos" ]; then
    cat $autopull_repo_file
    exit 0
fi

if [ "$#" -eq 0 ]; then
    set -- "$PWD"
fi

current_dir=$PWD
directories=$@
for i in $directories
do
    if [ "$i" = "$target_user" ]; then
        continue
    fi
    cd $current_dir
    # Check if the directory exists
    if [ ! -d "$i" ]; then
        echo "Error: Directory $i does not exist."
        continue
    fi

    # Change to the directory
    cd "$i"

    # Check if the directory is a git repository
    if [ ! -d ".git" ]; then
        echo "ERROR: Directory $i is not a git repository."
        continue
    fi

    if ! grep -q $PWD $autopull_repo_file; then
        # Check if the user wants to set up autopull for a repository y/n
        read -p "Do you want to set up periodic git autopull for $PWD? (y/n) " yn
        
        if [ "$yn" = "y" ]; then
            # Add the autopull script to the crontab and autopull_repo_file
            if ! grep -q $PWD $autopull_repo_file; then
                echo $PWD >> $autopull_repo_file
            fi
            echo "Autopull set up for $PWD for every minute."
        fi  
    fi

    git fetch
    # Check if the local branch has a remote tracking branch
    UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)
    
    if [ -z "$UPSTREAM" ]; then
        echo "No upstream branch is set for $PWD. Please ensure your branch is tracking a remote branch."
        continue
    fi

    # Check if the local branch is behind the remote
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
    BASE=$(git merge-base @ @{u})

    if [ "$LOCAL" = "$REMOTE" ]; then
        echo "Repository is up-to-date."
    elif [ "$LOCAL" = "$BASE" ]; then
        echo "Repository is behind, pulling changes..."
        git pull
    elif [ "$REMOTE" = "$BASE" ]; then
        echo "Repository has local changes that are not pushed."
    else
        echo "Repository has diverged."
    fi
done
cd $current_dir